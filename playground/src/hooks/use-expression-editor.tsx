import { ExpressionEngine } from "@choiceform/expression-engine"
import {
  autocompletion,
  CompletionContext,
  CompletionResult,
  startCompletion,
} from "@codemirror/autocomplete"
import { Diagnostic, linter, lintGutter } from "@codemirror/lint"
import { hoverTooltip, keymap } from "@codemirror/view"
import { useMemo } from "react"

interface ValidationInfo {
  isValid: boolean
  errors: Array<{
    message: string
    position?: { start: number; end: number }
  }>
  warnings: Array<{
    message: string
    position?: { start: number; end: number }
  }>
}

interface UseExpressionEditorProps {
  validation: ValidationInfo
}

export const useExpressionEditor = ({ validation }: UseExpressionEditorProps) => {
  // ÂàõÂª∫ÂºïÊìéÂÆû‰æãÁî®‰∫éËá™Âä®Ë°•ÂÖ®
  const engine = useMemo(() => new ExpressionEngine(), [])

  // Ëá™Âä®Êã¨Âè∑Èó≠ÂêàÂíåÊ®°ÊùøË°•ÂÖ®
  const autoCloseExtension = useMemo(() => {
    return keymap.of([
      {
        key: "{",
        run: (view: any) => {
          const { state } = view
          const pos = state.selection.main.head
          const beforeText = state.doc.sliceString(Math.max(0, pos - 1), pos)

          if (beforeText === "{") {
            // Â¶ÇÊûúÂâçÈù¢Â∑≤ÁªèÊúâ‰∏Ä‰∏™ {ÔºåÊèíÂÖ•Á¨¨‰∫å‰∏™ { ÂíåÁªìÊùüÁöÑ }}ÔºåÂΩ¢Êàê {{ }}
            view.dispatch({
              changes: { from: pos, insert: "{ }}" },
              selection: { anchor: pos + 2 }, // ÂÖâÊ†áÂÆö‰ΩçÂú®‰∏§‰∏™ } ‰πãÈó¥
            })

            // Áõ¥Êé•Ëß¶ÂèëËá™Âä®Ë°•ÂÖ®Ôºå‰∏ç‰ΩøÁî® setTimeout
            startCompletion(view)

            return true // ÈòªÊ≠¢ÈªòËÆ§ÁöÑ { ËæìÂÖ•
          }
          return false // ÂÖÅËÆ∏Ê≠£Â∏∏ËæìÂÖ•Á¨¨‰∏Ä‰∏™ {
        },
      },
      {
        key: "Ctrl-Space",
        run: (view: any) => {
          startCompletion(view)
          return true
        },
      },
    ])
  }, [])

  // Êô∫ËÉΩËá™Âä®Ë°•ÂÖ®
  const autoCompleteExtension = useMemo(() => {
    const completionSource = (context: CompletionContext): CompletionResult | null => {
      const doc = context.state.doc.toString()
      const pos = context.pos

      // ÁÆÄÂåñÊ£ÄÊü•ÔºöÊü•ÊâæÊúÄËøëÁöÑ {{ Âíå }}
      const beforeCursor = doc.substring(0, pos)

      // ÊâæÂà∞ÊúÄÂêé‰∏Ä‰∏™ {{ ÁöÑ‰ΩçÁΩÆ
      const lastOpenIndex = beforeCursor.lastIndexOf("{{")

      // Ê£ÄÊü•ÊòØÂê¶Âú®Ê®°ÊùøÂÜÖÈÉ®
      const inTemplate =
        lastOpenIndex !== -1 && beforeCursor.substring(lastOpenIndex).indexOf("}}") === -1

      console.log("üîç Auto-completion check:", {
        pos,
        doc: doc.substring(Math.max(0, pos - 20), pos + 10),
        inTemplate,
        lastOpenIndex,
      })

      if (!inTemplate) {
        console.log("‚ùå Not in template, skipping completion")
        return null
      }

      // ÊèêÂèñÂΩìÂâçÊ≠£Âú®ËæìÂÖ•ÁöÑËØç
      const wordMatch = context.matchBefore(/\$?[a-zA-Z_][a-zA-Z0-9_.]*/)
      const word = wordMatch?.text || ""

      console.log("üîç Word match:", { word, wordMatch })

      console.log("üöÄ Calling engine.getCompletions with:", {
        template: doc,
        position: pos,
        context: {},
      })

      // Áõ¥Êé•Ë∞ÉÁî®APIÔºå‰∏ç‰ΩøÁî®try-catchÔºåËÆ©ÈîôËØØÊö¥Èú≤
      const completions = engine.getCompletions({
        template: doc,
        position: pos,
        context: {},
      })

      console.log("‚úÖ Engine completions received:", {
        count: completions.length,
        completions: completions,
        firstFew: completions.slice(0, 5),
      })

      const options = completions.map((item) => ({
        label: item.label,
        type:
          item.kind === 1
            ? "variable"
            : item.kind === 2
              ? "function"
              : item.kind === 3
                ? "method"
                : item.kind === 4
                  ? "property"
                  : "keyword",
        info: item.detail || "",
        detail: item.documentation || "",
        boost: item.sortText ? parseInt(item.sortText) : 50,
        apply: (view: any, completion: any, from: number, to: number) => {
          let insert = item.insertText || item.label
          let cursorOffset = insert.length

          // Êô∫ËÉΩÊèíÂÖ•ÈÄªËæë
          if (item.kind === 2 && !insert.includes("(")) {
            // Function
            insert = `${insert}()`
            cursorOffset = insert.length - 1 // ÂÖâÊ†áÂú®Êã¨Âè∑‰∏≠Èó¥
          } else if (item.kind === 3 && insert.startsWith(".") && !insert.includes("(")) {
            // Method
            insert = `${insert}()`
            cursorOffset = insert.length - 1
          }

          console.log("üéØ Applying completion:", { insert, cursorOffset })

          view.dispatch({
            changes: { from, to, insert },
            selection: { anchor: from + cursorOffset },
          })
        },
      }))

      // Ê†πÊçÆËæìÂÖ•ËøáÊª§
      const filtered = options.filter((option) => {
        if (!word) return true
        const label = option.label.toLowerCase()
        const query = word.toLowerCase()
        return label.startsWith(query) || label.includes(query)
      })

      console.log("üìã Filtered completion options:", {
        count: filtered.length,
        labels: filtered.map((o) => o.label),
        wordFilter: word,
      })

      return {
        from: wordMatch ? wordMatch.from : pos,
        options: filtered.slice(0, 20),
        validFor: /^[\w$.]*/,
      }
    }

    return autocompletion({
      override: [completionSource],
      closeOnBlur: false,
      maxRenderedOptions: 20,
      activateOnTyping: true,
      defaultKeymap: true,
      tooltipClass: () => "cm-completions-tooltip",
    })
  }, [engine])

  // È™åËØÅÂíåÈîôËØØÊèêÁ§∫
  const validationExtension = useMemo(() => {
    const linterSource = () => {
      const diagnostics: Diagnostic[] = []

      // Ê∑ªÂä†ÈîôËØØ
      validation.errors.forEach((error) => {
        diagnostics.push({
          from: error.position?.start || 0,
          to: error.position?.end || 0,
          severity: "error",
          message: error.message,
        })
      })

      // Ê∑ªÂä†Ë≠¶Âëä
      validation.warnings.forEach((warning) => {
        diagnostics.push({
          from: warning.position?.start || 0,
          to: warning.position?.end || 0,
          severity: "warning",
          message: warning.message,
        })
      })

      return diagnostics
    }

    const tooltipSource = hoverTooltip((view: any, pos: number, side: any) => {
      // Êü•Êâæ‰ΩçÁΩÆÁõ∏ÂÖ≥ÁöÑÈîôËØØÊàñË≠¶Âëä
      const error = validation.errors.find(
        (e) => e.position && pos >= e.position.start && pos <= e.position.end,
      )

      const warning = validation.warnings.find(
        (w) => w.position && pos >= w.position.start && pos <= w.position.end,
      )

      const message = error?.message || warning?.message
      if (!message) return null

      return {
        pos,
        above: true,
        create: () => {
          const dom = document.createElement("div")
          dom.className = error ? "cm-tooltip-error" : "cm-tooltip-warning"
          dom.style.cssText = `
            padding: 10px 14px;
            background: ${error ? "#fef2f2" : "#fffbeb"};
            border: 1px solid ${error ? "#fecaca" : "#fed7aa"};
            border-radius: 6px;
            color: ${error ? "#dc2626" : "#d97706"};
            font-size: 13px;
            max-width: 320px;
            white-space: pre-wrap;
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
            z-index: 1000;
          `

          // Ê∑ªÂä†ÂõæÊ†á
          const icon = error ? "‚ùå" : "‚ö†Ô∏è"
          dom.textContent = `${icon} ${message}`

          return { dom }
        },
      }
    })

    return [linter(linterSource), lintGutter(), tooltipSource]
  }, [validation])

  return {
    autoCloseExtension,
    autoCompleteExtension,
    validationExtension,
  }
}
